CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(SimpleWallPaper VERSION 1.0.0)


# swp version setup.
SET(SWP_VERSION_MAJOR 1)
SET(SWP_VERSION_MINOR 0)
SET(SWP_VERSION_REVISION 0)
SET(SWP_VERSION_STATE r)
SET(SWP_VERSION ${SWP_VERSION_MAJOR}.${SWP_VERSION_MINOR}${SWP_VERSION_STATE}${SWP_VERSION_REVISION} )

# Set version preprocessor macros.
MESSAGE(STATUS "Version ${SWP_VERSION}")
ADD_DEFINITIONS(-DSWP_MAJOR_VERSION=${SWP_VERSION_MAJOR})
ADD_DEFINITIONS(-DSWP_MINOR_VERSION=${SWP_VERSION_MINOR})
ADD_DEFINITIONS(-DSWP_REVISION_VERSION=${SWP_VERSION_REVISION})
ADD_DEFINITIONS(-DSWP_STATE_VERSION=${SWP_VERSION_STATE})
ADD_DEFINITIONS(-DSWP_STR_VERSION="${SWP_VERSION}")

# GCC compiler options.
IF((CMAKE_COMPILER_IS_GNUCC) AND NOT CMAKE_COMPILER_IS_MINGOW)
	ADD_DEFINITIONS(-fPIC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")

	# Compiling language standard.
	ADD_DEFINITIONS(-std=c11)
	ADD_DEFINITIONS(-w)

	# Check build target.
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG -O2)
		SET(CMAKE_RELEASE TRUE)
	ELSEIF( CMAKE_BUILD_TYPE STREQUAL "Debug")
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3 -O0)
		SET(CMAKE_DEBUG TRUE)
	ENDIF()

ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	# Compiling language standard.
	ADD_DEFINITIONS(-fPIC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	ADD_DEFINITIONS(-std=c11)

		# Check build target.
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG -O2)
		SET(CMAKE_RELEASE TRUE)
	ELSEIF( CMAKE_BUILD_TYPE STREQUAL "Debug")
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3 -O0)
		SET(CMAKE_DEBUG TRUE)
	ENDIF()
	#
	ADD_DEFINITIONS(-w)

ELSEIF(MSVC)

		# Enable multi-core complication with MSVC
		ADD_DEFINITIONS(/MP)
		ADD_DEFINITIONS(/DSWP_INTERNAL=1)
ENDIF()


SET(OpenGL_GL_PREFERENCE "GLVND")
INCLUDE(FindOpenGL)
FIND_PACKAGE(OpenGL)

IF(OPENGL_FOUND)
    MESSAGE(STATUS "OpenGL found: ${OPENGL_LIBRARIES}.")
ENDIF()

#
IF(PKG_CONFIG_FOUND)
	MESSAGE(STATUS "Found pkg-config: ${PKG_CONFIG_EXECUTABLE} -- version ${PKG_CONFIG_VERSION_STRING}.")
	PKG_CHECK_MODULES(SDL2 QUIET sdl2)
ELSE()
	MESSAGE(ERROR "Could not find deps.")
ENDIF()

# Source files.
FILE (GLOB headers 	${CMAKE_CURRENT_SOURCE_DIR}/*.h)
FILE (GLOB source_files 	${CMAKE_CURRENT_SOURCE_DIR}/*.c)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# Target with no simd extensions requirements.
ADD_EXECUTABLE(swp ${headers} ${source_files})
TARGET_LINK_LIBRARIES(swp SDL2  ${OPENGL_LIBRARIES} ${SDL2_LIBRARIES} freeimage)


# Add the install targets
INSTALL (TARGETS swp DESTINATION bin)

# Create distrubtion archive file.
IF( UNIX )
	SET( TARGETDIR "${PROJECT_NAME}-${SWP_VERSION}")
	ADD_CUSTOM_TARGET(	distribution
				COMMAND mkdir -p ${TARGETDIR}
				COMMAND cp -r ${CMAKE_CURRENT_SOURCE_DIR}/*.c
				COMMAND cp -r ${CMAKE_CURRENT_SOURCE_DIR}/*.h
				${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt
				${CMAKE_CURRENT_SOURCE_DIR}/LICENSE
				${CMAKE_CURRENT_SOURCE_DIR}/README.md  ${TARGETDIR}
				COMMAND tar cf - ${TARGETDIR} | gzip -c > ${TARGETDIR}.tar.gz
				COMMAND rm -r ${TARGETDIR} )
ENDIF()